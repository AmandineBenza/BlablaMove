{
	"info": {
		"_postman_id": "ef476034-446e-4d34-b3b1-99c9867dbd42",
		"name": "BBM",
		"description": "Blabla Move end-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PRE-Create-Alice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "60b6eb9b-b874-484f-a5e3-ed283643fbe1",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preTextTest\", () => {",
							"    tests[\"Content-Type has text/plain.\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "86368264-1f3d-448a-8a24-b81bcd11ba6a",
						"exec": [
							"eval(globals.commonPreTest)();",
							"eval(globals.preTextTest)();",
							"",
							"// request's components validity",
							"tests[\"Response\"] = responseBody.includes(\"User created.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"create-user\" ,\"data\": {\"name\":\"Alice\", \"mail\":\"Alice@me.fr\",\"phone\":\"0675767778\",\"password\":\"passwordop\"}}"
				},
				"url": {
					"raw": "localhost:8080/BBM/USERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"USERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "PRE-Create-Bob",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "60b6eb9b-b874-484f-a5e3-ed283643fbe1",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preTextTest\", () => {",
							"    tests[\"Content-Type has text/plain.\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "86368264-1f3d-448a-8a24-b81bcd11ba6a",
						"exec": [
							"eval(globals.commonPreTest)();",
							"eval(globals.preTextTest)();",
							"",
							"// request's components validity",
							"tests[\"Response\"] = responseBody.includes(\"User created.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"create-user\" ,\"data\": {\"name\":\"Bob\", \"mail\":\"Bob@me.fr\",\"phone\":\"0675767778\",\"password\":\"passwordop\"}}"
				},
				"url": {
					"raw": "localhost:8080/BBM/USERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"USERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create-offer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b20c2a3f-140e-4eaf-9cad-31d920d136fc",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preJsonTest\", () => {",
							"    tests[\"Content-Type has application/json.\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5661bfb9-f559-4e43-b38c-40a0f62726f6",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components existence",
							"tests[\"Has offerID..\"] = responseBody.has(\"offerID\");",
							"tests[\"Has ownerID.\"] = responseBody.has(\"ownerID\");",
							"tests[\"Has price.\"] = responseBody.has(\"price\");",
							"tests[\"Has startCity.\"] = responseBody.has(\"startCity\");",
							"tests[\"Has endCity.\"] = responseBody.has(\"endCity\");",
							"tests[\"Has capacity.\"] = responseBody.has(\"capacity\");",
							"",
							"tests[\"Has status.\"] = responseBody.has(\"status\");",
							"tests[\"Has distance.\"] = responseBody.has(\"distance\");",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody);",
							"// request",
							"var jsonRequest = JSON.parse(request.data)[\"data\"];",
							"",
							"tests[\"Event is valid\"] == jsonData[\"event\"] == \"create-offer\";",
							"",
							"tests[\"Check offerID.\"] = jsonData[\"offerID\"].toLowerCase().includes(\"alice\");",
							"",
							"// set environment offer ID",
							"postman.setEnvironmentVariable(\"offerID\", jsonData[\"offerID\"]);",
							"console.log(\"offerID:\" + jsonData[\"offerID\"]);",
							"console.log(\"environment offer ID:\" + environment[\"offerID\"]);",
							"",
							"tests[\"Check ownerID.\"] = jsonData[\"ownerID\"].toLowerCase().includes(\"alice\");",
							"",
							"tests[\"Check price.\"] = jsonData[\"price\"] > 0;",
							"tests[\"Check startCity.\"] = jsonData[\"startCity\"] == jsonRequest[\"startCity\"];",
							"tests[\"Check endCity.\"] = jsonData[\"endCity\"] == jsonRequest[\"endCity\"];",
							"tests[\"Check capacity.\"] = jsonData[\"capacity\"] == jsonRequest[\"capacity\"];",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"POSTED\";",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\":\"create-offer\",\"data\":{\"ownerID\":\"Alice@me.fr\", \"status\":\"AWAITING_CONFIRMATION\", \"price\":\"13\", \"startCity\":\"Nice\", \"endCity\":\"Sophia\", \"capacity\":\"4\" }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consult-offers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6186334-c13a-40b3-93eb-787da8bcbd0f",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preJsonTest\", () => {",
							"    tests[\"Content-Type has application/json.\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "17aa46a3-c970-470c-98a8-d7353bb4c8e8",
						"exec": [
							"eval(globals.commonPreTest)();",
							"eval(globals.preJsonTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody)[0];",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"// request's components existence",
							"tests[\"Has offerID..\"] = jsonData[\"offerID\"] !== null;",
							"tests[\"Has ownerID.\"] = jsonData[\"ownerID\"] !== null;",
							"tests[\"Has price.\"] = jsonData[\"price\"] !== null;",
							"tests[\"Has startCity.\"] = jsonData[\"startCity\"] !== null;",
							"tests[\"Has endCity.\"] = jsonData[\"endCity\"] !== null;",
							"tests[\"Has capacity.\"] = jsonData[\"capacity\"]!== null;",
							"tests[\"Has status.\"] = jsonData[\"status\"] !== null;",
							"tests[\"Has distance.\"] =jsonData[\"distance\"] !== null;",
							"",
							"tests[\"Event is valid\"] == jsonData[\"event\"] == \"consult-offers\";",
							"",
							"tests[\"Check price.\"] = jsonData[\"price\"] > 0;",
							"tests[\"Check startCity.\"] = jsonData[\"startCity\"] == jsonData[\"startCity\"];",
							"tests[\"Check endCity.\"] = jsonData[\"endCity\"] == jsonData[\"endCity\"];",
							"tests[\"Check capacity.\"] = jsonData[\"capacity\"] == jsonData[\"capacity\"];",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"POSTED\"; "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\":\"consult-offers\",\"data\": {\"weight\": \"5\", \"volume\":\"6\", \"date\":\"5\" },\"filters\": {\"weight\": \"2\",\"startAddress\": \"Nice\",\"endAddress\": \"Sophia\",\"maxPrice\": \"100\"}}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ask-offer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9ad9119-471b-44bc-84ff-31160ae822ff",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f6ed98d2-3ed0-4c70-88a8-4a2fe75f1449",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody);",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"tests[\"Event is ok.\"] = jsonRequest[\"event\"]  == \"ask-offer\";",
							"",
							"// ADD TRANSACTION ID TO ENVIRONMENT",
							"postman.setEnvironmentVariable(\"transactionID\", jsonData[\"transactionID\"]);",
							"console.log(\"transactionID:\" + jsonData[\"transactionID\"]);",
							"console.log(\"environment transaction ID:\" + environment[\"transactionID\"]);",
							"",
							"tests[\"Check offerID\"] = jsonData[\"offerID\"] !== null && jsonData[\"offerID\"].includes(\"@\");",
							"tests[\"Check ownerID\"] = jsonData[\"ownerID\"] !== null && jsonData[\"ownerID\"].includes(\"@\");",
							"tests[\"Check buyerID\"] = jsonData[\"buyerID\"] !== null && jsonData[\"buyerID\"].includes(\"@\");",
							"tests[\"Check volume\"] = jsonData[\"volume\"] !== null && jsonData[\"volume\"] > 0;",
							"tests[\"Check weigth\"] = jsonData[\"weigth\"] !== null && jsonData[\"weigth\"] > 0;",
							"tests[\"Check finalPrice\"] = jsonData[\"finalPrice\"] !== null && jsonData[\"finalPrice\"] > 0;",
							"tests[\"Check dateBeforeOrder\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check confirmationDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositConfirmationDate\"] = jsonData[\"clientDepositConfirmationDate\"] !== null;",
							"    tests[\"Check status.\"] = jsonData[\"status\"] == \"AWAITING_CONFIRMATION\";",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\":\"ask-offer\",\"data\": {\"offerID\": \"{{offerID}}\",\"buyerID\": \"Bob@me.fr\",\"weight\": \"5\", \"volume\":\"6\", \"date\":\"5\" }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consult-awaiting-offers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "743b950f-97be-4610-89ab-823846ee1564",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preJsonTest\", () => {",
							"    tests[\"Content-Type has application/json.\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "411116c0-a3d8-4305-b261-0a61e5387363",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody)[0];",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"tests[\"Event is valid\"] == jsonData[\"event\"] == \"consulting-awaiting-offer\";",
							"",
							"tests[\"Check offerID content.\"] = jsonData[\"offerID\"].toLowerCase().includes(\"alice\");",
							"tests[\"Check ownerID.\"] = jsonData[\"ownerID\"].toLowerCase().includes(\"alice\");",
							"tests[\"Check weigth.\"] = jsonData[\"weigth\"] !== null;",
							"tests[\"Check finalPrice.\"] = jsonData[\"finalPrice\"] !== null;",
							"tests[\"Check dateBeforeOrder.\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate.\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"AWAITING_CONFIRMATION\";"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"consult-awaiting-offers\" ,\"data\": {\"ownerID\": \"Alice@me.fr\"}}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate-offer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99b6e421-9650-4395-9af3-f8f576b12fc8",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});",
							"",
							"postman.setGlobalVariable(\"preJsonTest\", () => {",
							"    tests[\"Content-Type has application/json.\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aa127bf0-3b87-4377-8010-3cc576fc4874",
						"exec": [
							"// -------",
							"// If test fails, please check the request body.",
							"// The transactionID should be provided in the Ask-offer response.",
							"// -------",
							"",
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody)[0];",
							"// request",
							"var jsonRequest = JSON.parse(request.data)[\"data\"];",
							"",
							"tests[\"Check transactionID.\"] = jsonData[\"transactionID\"] == jsonRequest[\"transactionID\"];",
							"tests[\"Check offerID\"] = jsonData[\"offerID\"] !== null;",
							"tests[\"Check ownerID\"] = jsonData[\"ownerID\"] !== null;",
							"tests[\"Check buyerID\"] = jsonData[\"buyerID\"] !== null;",
							"tests[\"Check volume\"] = jsonData[\"volume\"] !== null && jsonData[\"volume\"] > 0;",
							"tests[\"Check weigth\"] = jsonData[\"weigth\"] !== null && jsonData[\"weigth\"] > 0;",
							"tests[\"Check finalPrice\"] = jsonData[\"finalPrice\"] !== null && jsonData[\"finalPrice\"] > 0;",
							"tests[\"Check dateBeforeOrder\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check confirmationDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositConfirmationDate\"] = jsonData[\"clientDepositConfirmationDate\"] !== null;",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"CONFIRMED\";"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"confirm-awaiting-offers\" ,\"data\": {\"transactionID\": \"{{transactionID}}\" }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob-claims-items-reception",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "694d8112-4305-4475-b5f1-e58445468889",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody);",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"tests[\"Event is ok.\"] = jsonRequest[\"event\"]  == \"claim-receipt\";",
							"tests[\"TransactionID is valid.\"] = jsonRequest[\"data\"][\"transactionID\"] == jsonData[\"transactionID\"];",
							"",
							"tests[\"Check offerID\"] = jsonData[\"offerID\"] !== null && jsonData[\"offerID\"].includes(\"@\");",
							"tests[\"Check ownerID\"] = jsonData[\"ownerID\"] !== null && jsonData[\"ownerID\"].includes(\"@\");",
							"tests[\"Check buyerID\"] = jsonData[\"buyerID\"] !== null && jsonData[\"buyerID\"].includes(\"@\");",
							"tests[\"Check volume\"] = jsonData[\"volume\"] !== null && jsonData[\"volume\"] > 0;",
							"tests[\"Check weigth\"] = jsonData[\"weigth\"] !== null && jsonData[\"weigth\"] > 0;",
							"tests[\"Check finalPrice\"] = jsonData[\"finalPrice\"] !== null && jsonData[\"finalPrice\"] > 0;",
							"tests[\"Check dateBeforeOrder\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check confirmationDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositConfirmationDate\"] = jsonData[\"clientDepositConfirmationDate\"] !== null;",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"AWAITING_RECEIPT_CONFIRMATION\";",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ceda193e-973d-4f4a-8c2c-93da58afafb9",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"claim-receipt\" ,\"data\": {\"transactionID\":{{transactionID}} }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice-confirms-Bob-items-reception",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63924992-d1d9-4d7c-bebe-a795c3ae4c31",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody)[0];",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"tests[\"Event is ok.\"] = jsonRequest[\"event\"]  == \"confirm-receipt\";",
							"tests[\"TransactionID is valid.\"] = jsonRequest[\"data\"][\"transactionID\"] == jsonData[\"transactionID\"];",
							"",
							"tests[\"Check offerID\"] = jsonData[\"offerID\"] !== null && jsonData[\"offerID\"].includes(\"@\");",
							"tests[\"Check ownerID\"] = jsonData[\"ownerID\"] !== null && jsonData[\"ownerID\"].includes(\"@\");",
							"tests[\"Check buyerID\"] = jsonData[\"buyerID\"] !== null && jsonData[\"buyerID\"].includes(\"@\");",
							"tests[\"Check volume\"] = jsonData[\"volume\"] !== null && jsonData[\"volume\"] > 0;",
							"tests[\"Check weigth\"] = jsonData[\"weigth\"] !== null && jsonData[\"weigth\"] > 0;",
							"tests[\"Check finalPrice\"] = jsonData[\"finalPrice\"] !== null && jsonData[\"finalPrice\"] > 0;",
							"tests[\"Check dateBeforeOrder\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check confirmationDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositConfirmationDate\"] = jsonData[\"clientDepositConfirmationDate\"] !== null;",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"RECEIPT_DONE\";",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b29a9f9d-14b5-4e67-8f0b-6cb57aebed02",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"confirm-receipt\",\"data\": {\"transactionID\": {{transactionID}}}}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice-claims-Bob-items-deposit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb25c142-68bf-49a9-a21e-09669179d946",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b4f347f3-7fa3-4b0d-9981-cafcc987e2e2",
						"exec": [
							"eval(globals.commonPreTest)();",
							"",
							"// request's components validity",
							"var jsonData = JSON.parse(responseBody)[0];",
							"// request",
							"var jsonRequest = JSON.parse(request.data);",
							"",
							"tests[\"Event is ok.\"] = jsonRequest[\"event\"]  == \"claim-deposit\";",
							"tests[\"TransactionID is valid.\"] = jsonRequest[\"data\"][\"transactionID\"] == jsonData[\"transactionID\"];",
							"",
							"tests[\"Check offerID\"] = jsonData[\"offerID\"] !== null && jsonData[\"offerID\"].includes(\"@\");",
							"tests[\"Check ownerID\"] = jsonData[\"ownerID\"] !== null && jsonData[\"ownerID\"].includes(\"@\");",
							"tests[\"Check buyerID\"] = jsonData[\"buyerID\"] !== null && jsonData[\"buyerID\"].includes(\"@\");",
							"tests[\"Check volume\"] = jsonData[\"volume\"] !== null && jsonData[\"volume\"] > 0;",
							"tests[\"Check weigth\"] = jsonData[\"weigth\"] !== null && jsonData[\"weigth\"] > 0;",
							"tests[\"Check finalPrice\"] = jsonData[\"finalPrice\"] !== null && jsonData[\"finalPrice\"] > 0;",
							"tests[\"Check dateBeforeOrder\"] = jsonData[\"dateBeforeOrder\"] !== null;",
							"tests[\"Check askForConfirmationDate\"] = jsonData[\"askForConfirmationDate\"] !== null;",
							"tests[\"Check confirmationDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositDate\"] = jsonData[\"confirmationDate\"] !== null;",
							"tests[\"Check clientDepositConfirmationDate\"] = jsonData[\"clientDepositConfirmationDate\"] !== null;",
							"tests[\"Check status.\"] = jsonData[\"status\"] == \"AWAITING_DEPOSIT_CONFIRMATION\";",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"claim-deposit\",\"data\": {\"transactionID\": {{transactionID}} }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob-confirms-its-items-deposit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3cb2d210-0abb-465e-9234-f21aff3ede15",
						"exec": [
							"postman.setGlobalVariable(\"commonPreTest\", () => {",
							"    // response code validity",
							"    tests[\"Status code is OK.\"] = responseCode.code == 200;",
							"    ",
							"    // content type header existence",
							"    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"    ",
							"    tests[\"Has Content-Type.\"] = contentTypeHeaderExists;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"event\": \"confirm-deposit\" ,\"data\": {\"transactionID\": {{transactionID}} }}"
				},
				"url": {
					"raw": "localhost:8080/BBM/OFFERS",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BBM",
						"OFFERS"
					]
				}
			},
			"response": []
		}
	]
}